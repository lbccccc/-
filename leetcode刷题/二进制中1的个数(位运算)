请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。

示例 1：

输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
示例 2：

输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
示例 3：

输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。


方法一：逐位判断
根据 与运算 定义，设二进制数字 nn ，则有：
若 n \& 1 = 0n&1=0 ，则 nn 二进制 最右一位 为 00 ；
若 n \& 1 = 1n&1=1 ，则 nn 二进制 最右一位 为 11 。
根据以上特点，考虑以下 循环判断 ：
判断 nn 最右一位是否为 11 ，根据结果计数。
将 nn 右移一位（本题要求把数字 nn 看作无符号数，因此使用 无符号右移 操作）。
算法流程：
初始化数量统计变量 res = 0res=0 。
循环逐位判断： 当 n = 0n=0 时跳出。
res += n & 1 ： 若 n \& 1 = 1n&1=1 ，则统计数 resres 加一。
n >>= 1 ： 将二进制数字 nn 无符号右移一位（ Java 中无符号右移为 ">>>" ） 。
返回统计数量 resres 。

复杂度分析：
时间复杂度 O(log_2 n)O(log 
2
​	
 n) ： 此算法循环内部仅有 移位、与、加 等基本运算，占用 O(1)O(1) ；逐位判断需循环 log_2 nlog 
2
​	
 n 次，其中 log_2 nlog 
2
​	
 n 代表数字 nn 最高位 11 的所在位数（例如 log_2 4 = 2log 
2
​	
 4=2, log_2 16 = 4log 
2
​	
 16=4）。
空间复杂度 O(1)O(1) ： 变量 resres 使用常数大小额外空间。
代码：
pythonjava

public class Solution {
    public int hammingWeight(int n) {
        int res = 0;
        while(n != 0) {
            res += n & 1;
            n >>>= 1;
        }
        return res;
    }
}


方法二：巧用 n \& (n - 1)n&(n−1)
(n - 1)(n−1) 解析： 二进制数字 nn 最右边的 11 变成 00 ，此 11 右边的 00 都变成 11 。
n \& (n - 1)n&(n−1) 解析： 二进制数字 nn 最右边的 11 变成 00 ，其余不变。


算法流程：
初始化数量统计变量 resres 。
循环消去最右边的 11 ：当 n = 0n=0 时跳出。
res += 1 ： 统计变量加 11 ；
n &= n - 1 ： 消去数字 nn 最右边的 11 。
返回统计数量 resres 。

时间复杂度 O(M)O(M) ： n \& (n - 1)n&(n−1) 操作仅有减法和与运算，占用 O(1)O(1) ；设 MM 为二进制数字 nn 中 11 的个数，则需循环 MM 次（每轮消去一个 11 ），占用 O(M)O(M) 。
空间复杂度 O(1)O(1) ： 变量 resres 使用常数大小额外空间。
代码：
pythonjava

public class Solution {
    public int hammingWeight(int n) {
        int res = 0;
        while(n != 0) {
            res++;
            n &= n - 1;
        }
        return res;
    }
}










扩展：csdn上搜的





n&(n-1)作用：将n的二进制表示中的最低位为1的改为0，先看一个简单的例子：
n = 10100(二进制），则(n-1) = 10011 ==》n&(n-1) = 10000
可以看到原本最低位为1的那位变为0。
弄明白了n&(n-1)的作用，那它有哪些应用？

------------------------------------------------------------------------------------------------------


1、 判断一个数是否是2的方幂
n > 0 && ((n & (n - 1)) == 0 )

解释((n & (n-1)) == 0)：

如果A&B==0，表示A与B的二进制形式没有在同一个位置都为1的时候。

那么本题到底啥意思？？

不妨先看下n-1是什么意思。

   令:n=1101011000(二进制,十进制也一样)，则

    n-1=1101010111。

n&(n-1)=1101010000

由此可以得出，n和n-1的低位不一样，直到有个转折点，就是借位的那个点，从这个点开始的高位，n和n-1都一样，如果高位一样这就造成一个问题，就是n和n-1在相同的位上可能会有同一个1，从而使((n & (n-1)) != 0),如果想要

((n & (n-1)) == 0)，则高位必须全为0，这样就没有相同的1。

所以n是2的幂或0

2. 求某一个数的二进制表示中1的个数
while (n >0 ) {
      count ++;
      n &= (n-1);
}

3. 计算N!的质因数2的个数。
容易得出N!质因数2的个数 = [N / 2] + [N / 4] + [N / 8] + ....
下面通过一个简单的例子来推导一下过程：N = 10101(二进制表示）
现在我们跟踪最高位的1，不考虑其他位假定为0，
则在
[N / 2]    01000
[N / 4]    00100
[N / 8]    00010
[N / 8]    00001
则所有相加等于01111 = 10000 - 1
由此推及其他位可得：(10101)!的质因数2的个数为10000 - 1 + 00100 - 1 + 00001 - 1 = 10101 - 3(二进制表示中1的个数)

推及一般N!的质因数2的个数为N - （N二进制表示中1的个数）




2020 9.18 11.48
