请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。

示例 1：

输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
示例 2：

输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
示例 3：

输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。


方法一：逐位判断
根据 与运算 定义，设二进制数字 nn ，则有：
若 n \& 1 = 0n&1=0 ，则 nn 二进制 最右一位 为 00 ；
若 n \& 1 = 1n&1=1 ，则 nn 二进制 最右一位 为 11 。
根据以上特点，考虑以下 循环判断 ：
判断 nn 最右一位是否为 11 ，根据结果计数。
将 nn 右移一位（本题要求把数字 nn 看作无符号数，因此使用 无符号右移 操作）。
算法流程：
初始化数量统计变量 res = 0res=0 。
循环逐位判断： 当 n = 0n=0 时跳出。
res += n & 1 ： 若 n \& 1 = 1n&1=1 ，则统计数 resres 加一。
n >>= 1 ： 将二进制数字 nn 无符号右移一位（ Java 中无符号右移为 ">>>" ） 。
返回统计数量 resres 。

复杂度分析：
时间复杂度 O(log_2 n)O(log 
2
​	
 n) ： 此算法循环内部仅有 移位、与、加 等基本运算，占用 O(1)O(1) ；逐位判断需循环 log_2 nlog 
2
​	
 n 次，其中 log_2 nlog 
2
​	
 n 代表数字 nn 最高位 11 的所在位数（例如 log_2 4 = 2log 
2
​	
 4=2, log_2 16 = 4log 
2
​	
 16=4）。
空间复杂度 O(1)O(1) ： 变量 resres 使用常数大小额外空间。
代码：
pythonjava

public class Solution {
    public int hammingWeight(int n) {
        int res = 0;
        while(n != 0) {
            res += n & 1;
            n >>>= 1;
        }
        return res;
    }
}


方法二：巧用 n \& (n - 1)n&(n−1)
(n - 1)(n−1) 解析： 二进制数字 nn 最右边的 11 变成 00 ，此 11 右边的 00 都变成 11 。
n \& (n - 1)n&(n−1) 解析： 二进制数字 nn 最右边的 11 变成 00 ，其余不变。


算法流程：
初始化数量统计变量 resres 。
循环消去最右边的 11 ：当 n = 0n=0 时跳出。
res += 1 ： 统计变量加 11 ；
n &= n - 1 ： 消去数字 nn 最右边的 11 。
返回统计数量 resres 。

时间复杂度 O(M)O(M) ： n \& (n - 1)n&(n−1) 操作仅有减法和与运算，占用 O(1)O(1) ；设 MM 为二进制数字 nn 中 11 的个数，则需循环 MM 次（每轮消去一个 11 ），占用 O(M)O(M) 。
空间复杂度 O(1)O(1) ： 变量 resres 使用常数大小额外空间。
代码：
pythonjava

public class Solution {
    public int hammingWeight(int n) {
        int res = 0;
        while(n != 0) {
            res++;
            n &= n - 1;
        }
        return res;
    }
}

2020 9.18 11.48
