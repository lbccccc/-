基本类型
在 Kotlin 中，所有东西都是对象，Kotlin 中使用的基本类型有：数字、字符、布尔值、数组与字符串。

🏝️
var number: Int = 1 // 👈还有 Double Float Long Short Byte 都类似
var c: Char = 'c'
var b: Boolean = true
var array: IntArray = intArrayOf(1, 2) // 👈类似的还有 FloatArray DoubleArray CharArray 等，intArrayOf 是 Kotlin 的 built-in 函数
var str: String = "string"
Kotlin
这里有两个地方和 Java 不太一样：

Kotlin 里的 Int 和 Java 里的 int 以及 Integer 不同，主要是在装箱方面不同。

Java 里的 int 是 unbox 的，而 Integer 是 box 的：

☕️
int a = 1;
Integer b = 2; // 👈会被自动装箱 autoboxing
Java
Kotlin 里，Int 是否装箱根据场合来定：

🏝️
var a: Int = 1 // unbox
var b: Int? = 2 // box
var list: List<Int> = listOf(1, 2) // box
Kotlin
Kotlin 在语言层面简化了 Java 中的 int 和 Integer，但是我们对是否装箱的场景还是要有一个概念，因为这个牵涉到程序运行时的性能开销。

因此在日常的使用中，对于 Int 这样的基本类型，尽量用不可空变量。

Java 中的数组和 Kotlin 中的数组的写法也有区别：

☕️
int[] array = new int[] {1, 2};
Java
而在 Kotlin 里，上面的写法是这样的：

🏝️
var array: IntArray = intArrayOf(1, 2)
// 👆这种也是 unbox 的
Kotlin
简单来说，原先在 Java 里的基本类型，类比到 Kotlin 里面，条件满足如下之一就不装箱：

不可空类型。

使用 IntArray、FloatArray 等
